# -*- coding: utf-8 -*-
"""mart_layer_crash.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/embedded/projects/insurance-470520/locations/us-west1/repositories/829bca6f-75ea-4e26-8138-d20edca79d55

# Create the mart layer for the Crash Data warehouse
"""

from google.cloud import bigquery
project_id = "insurance-470520"
dataset_name = "crash_datasets"
region = "us-central1"

# Initialize client with project
bq_client = bigquery.Client(project=project_id)
# Build fully-qualified dataset ID
dataset_id = f"{project_id}.{dataset_name}"

# Define dataset resource
dataset = bigquery.Dataset(dataset_id)
dataset.location = region
dataset.description = "Project 5: Mart layer for crash datasets (BI-ready facts & dimensions)."
dataset.labels = {"layer": "mart", "domain": "crash"}

# Verify dataset
resp = bq_client.create_dataset(dataset, exists_ok=True)
print(f"Created/verified dataset: {resp.project}.{resp.dataset_id} (location: {resp.location})")

# Commented out IPython magic to ensure Python compatibility.
# %%bigquery
# SELECT column_name, data_type
# FROM `insurance-470520.crash_data_report_raw`.INFORMATION_SCHEMA.COLUMNS
# WHERE table_name = 'crash_data_report';

# Commented out IPython magic to ensure Python compatibility.
# %%bigquery
# SELECT *
# FROM `insurance-470520.crash_data_report_raw.crash_data_report`
# LIMIT 50;
# 
#

"""### Question 1: How have crashes, injuries, and fatalities changed by year, and what’s the fatality rate per event each year?"""

# Commented out IPython magic to ensure Python compatibility.
# %%bigquery
# SELECT DateTime
# FROM `insurance-470520.crash_data_report_raw.crash_data_report`
# WHERE DateTime IS NOT NULL
# LIMIT 5;
#

# Commented out IPython magic to ensure Python compatibility.
# %%bigquery
# CREATE OR REPLACE TABLE `insurance-470520.crash_datasets.crash_events_enriched`
# OPTIONS(
#   description = "Row-level crash events + parsed timestamp parts + per-event metrics",
#   labels = [("layer","mart"), ("domain","crash")]
# ) AS
# WITH parsed AS (
#   SELECT
#     t.*,
#     COALESCE(
#       SAFE.PARSE_TIMESTAMP('%Y/%m/%d %H:%M:%S%Ez', t.DateTime),
#       SAFE.PARSE_TIMESTAMP('%Y/%m/%d %H:%M:%S',    t.DateTime),
#       SAFE.PARSE_TIMESTAMP('%m/%d/%Y %H:%M:%S',    t.DateTime),
#       SAFE.PARSE_TIMESTAMP('%Y-%m-%d %H:%M:%S%Ez', t.DateTime)
#     ) AS event_ts
#   FROM `insurance-470520.crash_data_report_raw.crash_data_report` AS t
# )
# SELECT
#   -- keep all original columns
#   parsed.*,
# 
#   -- derived time parts (use distinct names to avoid collision with 'Year')
#   EXTRACT(YEAR  FROM event_ts) AS event_year,
#   EXTRACT(MONTH FROM event_ts) AS event_month,
#   EXTRACT(DAY   FROM event_ts) AS event_day,
#   EXTRACT(HOUR  FROM event_ts) AS event_hour,
# 
#   -- per-row metrics (no grouping)
#   1                                       AS crashes,
#   SAFE_CAST(Totalinjuries   AS INT64)     AS injuries,
#   SAFE_CAST(Totalfatalities AS INT64)     AS fatalities,
# 
#   -- rates at row grain (useful for later rollups)
#   SAFE_CAST(Totalinjuries   AS FLOAT64)                 AS injuries_per_event,
#   SAFE_CAST(Totalfatalities AS FLOAT64)                 AS fatalities_per_event,
#   ROUND(SAFE_CAST(Totalinjuries   AS FLOAT64) * 100, 3) AS injuries_per_100_crashes,
#   ROUND(SAFE_CAST(Totalfatalities AS FLOAT64) * 100, 3) AS fatalities_per_100_crashes
# FROM parsed
# WHERE event_ts IS NOT NULL;
#

"""#### Mart table of crash time summary"""

# Commented out IPython magic to ensure Python compatibility.
# %%bigquery
# CREATE OR REPLACE TABLE `insurance-470520.crash_datasets.crash_time_summary`
# PARTITION BY period_month
# CLUSTER BY hour
# OPTIONS(
#   description = "Project 5 mart: crashes, injuries, fatalities and rates by year/month/day/hour",
#   labels = [("layer","mart"), ("domain","crash")]
# ) AS
# WITH parsed AS (
#   SELECT
#     COALESCE(
#       SAFE.PARSE_TIMESTAMP('%Y/%m/%d %H:%M:%S%Ez', DateTime),
#       SAFE.PARSE_TIMESTAMP('%Y/%m/%d %H:%M:%S',    DateTime),
#       SAFE.PARSE_TIMESTAMP('%m/%d/%Y %H:%M:%S',    DateTime),
#       SAFE.PARSE_TIMESTAMP('%Y-%m-%d %H:%M:%S%Ez', DateTime)
#     ) AS ts,
#     SAFE_CAST(Totalinjuries   AS INT64)  AS injuries,
#     SAFE_CAST(Totalfatalities AS INT64)  AS fatalities
#   FROM `insurance-470520.crash_data_report_raw.crash_data_report`
#   WHERE DateTime IS NOT NULL
# )
# SELECT
#   EXTRACT(YEAR  FROM ts) AS year,
#   EXTRACT(MONTH FROM ts) AS month,
#   EXTRACT(DAY   FROM ts) AS day,
#   EXTRACT(HOUR  FROM ts) AS hour,
#   DATE_TRUNC(DATE(ts), MONTH) AS period_month,   -- partition column (DATE)
# 
#   COUNT(*)        AS crashes,
#   SUM(injuries)   AS injuries,
#   SUM(fatalities) AS fatalities,
#   ROUND(SAFE_DIVIDE(SUM(injuries),   COUNT(*)) * 100, 2) AS injuries_per_100_crashes,
#   ROUND(SAFE_DIVIDE(SUM(fatalities), COUNT(*)) * 100, 3) AS fatalities_per_100_crashes
# FROM parsed
# WHERE ts IS NOT NULL
# GROUP BY year, month, day, hour, period_month;
#

# Commented out IPython magic to ensure Python compatibility.
# %%bigquery
# SELECT *
# FROM `insurance-470520.crash_datasets.crash_time_summary`
# ORDER BY year, month, day, hour
# LIMIT 10;
# 
#

"""#### Top 10 years by crashes"""

# Commented out IPython magic to ensure Python compatibility.
# %%bigquery
# CREATE OR REPLACE TABLE `insurance-470520.crash_datasets.crash_top10_years` AS
# SELECT
#   year,
#   SUM(crashes)     AS total_crashes,
#   SUM(injuries)    AS total_injuries,
#   SUM(fatalities)  AS total_fatalities,
#   ROUND(SAFE_DIVIDE(SUM(injuries),   SUM(crashes)) * 100, 2) AS injuries_per_100_crashes,
#   ROUND(SAFE_DIVIDE(SUM(fatalities), SUM(crashes)) * 100, 3) AS fatalities_per_100_crashes
# FROM `insurance-470520.crash_datasets.mrt_crash_time_summary`
# GROUP BY year
# ORDER BY total_crashes DESC;
#

# Commented out IPython magic to ensure Python compatibility.
# %%bigquery
# SELECT * FROM `insurance-470520.crash_datasets.crash_by_years` LIMIT 10;

"""#### Months with the most crashes (across all years)"""

# Commented out IPython magic to ensure Python compatibility.
# %%bigquery
# -- Months with the most crashes (12 rows only; summed across all years)
# CREATE OR REPLACE TABLE `insurance-470520.crash_datasets.crash_by_months` AS
# SELECT
#   CAST(month AS INT64) AS month,
#   FORMAT_DATE('%B', DATE(2000, month, 1)) AS month_name,
#   SUM(crashes)    AS total_crashes,
#   SUM(injuries)   AS total_injuries,
#   SUM(fatalities) AS total_fatalities,
#   ROUND(SAFE_DIVIDE(SUM(injuries),   SUM(crashes)) * 100, 2) AS injuries_per_100_crashes,
#   ROUND(SAFE_DIVIDE(SUM(fatalities), SUM(crashes)) * 100, 3) AS fatalities_per_100_crashes
# FROM `insurance-470520.crash_datasets.mrt_crash_time_summary`
# WHERE month BETWEEN 1 AND 12
# GROUP BY month
# ORDER BY total_crashes DESC
# LIMIT 12;
# 
#

# Commented out IPython magic to ensure Python compatibility.
# %%bigquery
# SELECT * FROM `insurance-470520.crash_datasets.crash_by_months` LIMIT 10;

"""#### Days with the most crashes (across all years/months)"""

# Commented out IPython magic to ensure Python compatibility.
# %%bigquery
# -- Days (1–31) with the most crashes across all years
# CREATE OR REPLACE TABLE `insurance-470520.crash_datasets.crash_by_dates` AS
# SELECT
#   CAST(day AS INT64) AS day_of_month,
#   SUM(crashes)    AS total_crashes,
#   SUM(injuries)   AS total_injuries,
#   SUM(fatalities) AS total_fatalities,
#   ROUND(SAFE_DIVIDE(SUM(injuries),   SUM(crashes)) * 100, 2) AS injuries_per_100_crashes,
#   ROUND(SAFE_DIVIDE(SUM(fatalities), SUM(crashes)) * 100, 3) AS fatalities_per_100_crashes
# FROM `insurance-470520.crash_datasets.mrt_crash_time_summary`
# WHERE day BETWEEN 1 AND 31
# GROUP BY day_of_month
# ORDER BY total_crashes DESC;
# 
#

# Commented out IPython magic to ensure Python compatibility.
# %%bigquery
# SELECT * FROM `insurance-470520.crash_datasets.crash_by_dates`;

"""#### Hours with the most crashes (across all years/months/days)"""

# Commented out IPython magic to ensure Python compatibility.
# %%bigquery
# -- Hours (0–23) with the most crashes across all years
# CREATE OR REPLACE TABLE `insurance-470520.crash_datasets.crash_by_hours` AS
# SELECT
#   CAST(hour AS INT64) AS hour_of_day,
#   SUM(crashes)    AS total_crashes,
#   SUM(injuries)   AS total_injuries,
#   SUM(fatalities) AS total_fatalities,
#   ROUND(SAFE_DIVIDE(SUM(injuries),   SUM(crashes)) * 100, 2) AS injuries_per_100_crashes,
#   ROUND(SAFE_DIVIDE(SUM(fatalities), SUM(crashes)) * 100, 3) AS fatalities_per_100_crashes
# FROM `insurance-470520.crash_datasets.mrt_crash_time_summary`
# WHERE hour BETWEEN 0 AND 23
# GROUP BY hour_of_day
# ORDER BY total_crashes DESC;
#

# Commented out IPython magic to ensure Python compatibility.
# %%bigquery
# SELECT * FROM `insurance-470520.crash_datasets.crash_by_hours`

"""### Question 2: How do drug anf alcohol influences relate to crashes, injuries, and fatalities

#### Map influence labels
"""

# Commented out IPython magic to ensure Python compatibility.
# %%bigquery
# -- Value inventory for alcohol/drug flags
# WITH t AS (
#   SELECT
#     COALESCE(NULLIF(TRIM(AlcoholUse_Drv1),''),'__BLANK__') AS AlcoholUse_Drv1,
#     COALESCE(NULLIF(TRIM(AlcoholUse_Drv2),''),'__BLANK__') AS AlcoholUse_Drv2,
#     COALESCE(NULLIF(TRIM(DrugUse_Drv1),''),'__BLANK__')    AS DrugUse_Drv1,
#     COALESCE(NULLIF(TRIM(DrugUse_Drv2),''),'__BLANK__')    AS DrugUse_Drv2
#   FROM `insurance-470520.crash_data_report_raw.crash_data_report`
# )
# SELECT 'AlcoholUse_Drv1' AS field, AlcoholUse_Drv1 AS value, COUNT(*) AS cnt FROM t GROUP BY 1,2
# UNION ALL
# SELECT 'AlcoholUse_Drv2', AlcoholUse_Drv2, COUNT(*) FROM t GROUP BY 1,2
# UNION ALL
# SELECT 'DrugUse_Drv1', DrugUse_Drv1, COUNT(*) FROM t GROUP BY 1,2
# UNION ALL
# SELECT 'DrugUse_Drv2', DrugUse_Drv2, COUNT(*) FROM t GROUP BY 1,2
# ORDER BY field, cnt DESC;
#

"""#### Mart table of crashes, injurities and fatalities by drug and alcohol influences"""

# Commented out IPython magic to ensure Python compatibility.
# %%bigquery
# CREATE OR REPLACE VIEW `insurance-470520.crash_datasets.v_crash_flags_clean` AS
# SELECT
#   -- normalize alcohol/drug flags (driver 1 & 2)
#   * REPLACE (
#     CASE
#       WHEN LOWER(TRIM(AlcoholUse_Drv1)) = 'alcohol' THEN 'positive'
#       WHEN LOWER(TRIM(AlcoholUse_Drv1)) = 'no apparent influence' THEN 'negative'
#       WHEN AlcoholUse_Drv1 IS NULL OR TRIM(AlcoholUse_Drv1) = '' OR AlcoholUse_Drv1 = r'\N' THEN 'unknown'
#       ELSE LOWER(TRIM(AlcoholUse_Drv1))
#     END AS AlcoholUse_Drv1,
#     CASE
#       WHEN LOWER(TRIM(AlcoholUse_Drv2)) = 'alcohol' THEN 'positive'
#       WHEN LOWER(TRIM(AlcoholUse_Drv2)) = 'no apparent influence' THEN 'negative'
#       WHEN AlcoholUse_Drv2 IS NULL OR TRIM(AlcoholUse_Drv2) = '' OR AlcoholUse_Drv2 = r'\N' THEN 'unknown'
#       ELSE LOWER(TRIM(AlcoholUse_Drv2))
#     END AS AlcoholUse_Drv2,
#     CASE
#       WHEN LOWER(TRIM(DrugUse_Drv1)) = 'drugs' THEN 'positive'
#       WHEN LOWER(TRIM(DrugUse_Drv1)) = 'no apparent influence' THEN 'negative'
#       WHEN DrugUse_Drv1 IS NULL OR TRIM(DrugUse_Drv1) = '' OR DrugUse_Drv1 = r'\N' THEN 'unknown'
#       ELSE LOWER(TRIM(DrugUse_Drv1))
#     END AS DrugUse_Drv1,
#     CASE
#       WHEN LOWER(TRIM(DrugUse_Drv2)) = 'drugs' THEN 'positive'
#       WHEN LOWER(TRIM(DrugUse_Drv2)) = 'no apparent influence' THEN 'negative'
#       WHEN DrugUse_Drv2 IS NULL OR TRIM(DrugUse_Drv2) = '' OR DrugUse_Drv2 = r'\N' THEN 'unknown'
#       ELSE LOWER(TRIM(DrugUse_Drv2))
#     END AS DrugUse_Drv2
#   )
# FROM `insurance-470520.crash_data_report_raw.crash_data_report`;
#

# Commented out IPython magic to ensure Python compatibility.
# %%bigquery
# SELECT
#   AlcoholUse_Drv1, DrugUse_Drv1,
#   AlcoholUse_Drv2, DrugUse_Drv2,
#   COUNT(*) AS crash_count
# FROM `insurance-470520.crash_datasets.v_crash_flags_clean`
# GROUP BY 1,2,3,4
# ORDER BY crash_count DESC;
#

# Commented out IPython magic to ensure Python compatibility.
# %%bigquery
# -- Influence combinations A1..D4 using tidied flags
# CREATE OR REPLACE TABLE `insurance-470520.crash_datasets.mrt_driver_influence_summary`
# OPTIONS(
#   description = "Project 5 mart: crash/injury/fatality metrics by driver 1 & 2 influence combos (A1–D4)",
#   labels = [("layer","mart"), ("domain","crash")]
# ) AS
# WITH base AS (
#   SELECT
#     -- Map each driver to one of: none | alcohol | drug | both | unknown
#     CASE
#       WHEN AlcoholUse_Drv1 = 'negative' AND DrugUse_Drv1 = 'negative' THEN 'none'
#       WHEN AlcoholUse_Drv1 = 'positive' AND DrugUse_Drv1 = 'negative' THEN 'alcohol'
#       WHEN AlcoholUse_Drv1 = 'negative' AND DrugUse_Drv1 = 'positive' THEN 'drug'
#       WHEN AlcoholUse_Drv1 = 'positive' AND DrugUse_Drv1 = 'positive' THEN 'both'
#       ELSE 'unknown'
#     END AS d1_state,
#     CASE
#       WHEN AlcoholUse_Drv2 = 'negative' AND DrugUse_Drv2 = 'negative' THEN 'none'
#       WHEN AlcoholUse_Drv2 = 'positive' AND DrugUse_Drv2 = 'negative' THEN 'alcohol'
#       WHEN AlcoholUse_Drv2 = 'negative' AND DrugUse_Drv2 = 'positive' THEN 'drug'
#       WHEN AlcoholUse_Drv2 = 'positive' AND DrugUse_Drv2 = 'positive' THEN 'both'
#       ELSE 'unknown'
#     END AS d2_state,
#     SAFE_CAST(Totalinjuries AS FLOAT64)   AS total_injuries,
#     SAFE_CAST(Totalfatalities AS FLOAT64) AS total_fatalities
#   FROM `insurance-470520.crash_datasets.v_crash_flags_clean`
# ),
# labeled AS (
#   SELECT
#     -- Only keep rows where both driver states are known (exclude 'unknown')
#     CASE
#       WHEN d1_state = 'none'     AND d2_state = 'none'     THEN 'A1'
#       WHEN d1_state = 'none'     AND d2_state = 'alcohol'  THEN 'A2'
#       WHEN d1_state = 'none'     AND d2_state = 'drug'     THEN 'A3'
#       WHEN d1_state = 'none'     AND d2_state = 'both'     THEN 'A4'
#       WHEN d1_state = 'alcohol'  AND d2_state = 'none'     THEN 'B1'
#       WHEN d1_state = 'alcohol'  AND d2_state = 'alcohol'  THEN 'B2'
#       WHEN d1_state = 'alcohol'  AND d2_state = 'drug'     THEN 'B3'
#       WHEN d1_state = 'alcohol'  AND d2_state = 'both'     THEN 'B4'
#       WHEN d1_state = 'drug'     AND d2_state = 'none'     THEN 'C1'
#       WHEN d1_state = 'drug'     AND d2_state = 'alcohol'  THEN 'C2'
#       WHEN d1_state = 'drug'     AND d2_state = 'drug'     THEN 'C3'
#       WHEN d1_state = 'drug'     AND d2_state = 'both'     THEN 'C4'
#       WHEN d1_state = 'both'     AND d2_state = 'none'     THEN 'D1'
#       WHEN d1_state = 'both'     AND d2_state = 'alcohol'  THEN 'D2'
#       WHEN d1_state = 'both'     AND d2_state = 'drug'     THEN 'D3'
#       WHEN d1_state = 'both'     AND d2_state = 'both'     THEN 'D4'
#       ELSE 'OTHER'
#     END AS combo_code,
#     total_injuries,
#     total_fatalities
#   FROM base
#   WHERE d1_state <> 'unknown' AND d2_state <> 'unknown'
# )
# SELECT
#   combo_code,
#   COUNT(*)                                           AS crashes,
#   SUM(IFNULL(total_injuries, 0))                     AS injuries,
#   SUM(IFNULL(total_fatalities, 0))                   AS fatalities,
#   ROUND(SAFE_DIVIDE(SUM(IFNULL(total_injuries, 0)), COUNT(*)) * 100, 2)   AS injuries_per_100_crashes,
#   ROUND(SAFE_DIVIDE(SUM(IFNULL(total_fatalities, 0)), COUNT(*)) * 100, 3) AS fatalities_per_100_crashes
# FROM labeled
# WHERE combo_code <> 'OTHER'
# GROUP BY combo_code
# ORDER BY combo_code;  -- A1..D4 in order
#

"""* A1. Driver 1 and driver 2 were not under any influence
* A2. Driver 1 was not under any influence and driver 2 was under the influence of alcohol, no drug
* A3. Driver 1 was not under any influence and driver 2 was under the influence of drug, no alcohol
* A4. Driver 1 was not under any influence and driver 2 was under the influence of alcohol and drug

* B1. Driver 1 was under influence of alcohol, no drug and driver 2 was not under any influence
* B2. Driver 1 was under influence of alcohol, no drug and driver 2 was under the influence of alcohol, no drug
* B3. Driver 1 was under influence of alcohol, no drug and driver 2 was under the influence of drug, no alcohol
* B4. Driver 1 was under influence of alcohol, no drug and driver 2 was under the influence of drug and alcohol

* C1. Driver 1 under influence of drug, no alcohol and driver 2 was not under any influence
* C2. Driver 1 under influence of drug, no alcohol and driver 2 was under the influence of alcohol, no drug
* C3. Driver 1 under influence of drug, no alcohol and driver 2 was under the influence of drug, no alcohol
* C4. Driver 1 under influence of drug, no alcohol and driver 2 was under the influence of alcohol and drug

* D1. Driver 1 was under the influence of drug and alcohol and driver 2 was not under any influence
* D2. Driver 1 was under the influence of drug and alcohol and driver 2 was under the influence of alcohol, no drug
* D3. Driver 1 was under the influence of drug and alcohol and driver 2 was under the influence of drug, no alcohol
* D4. Driver 1 and driver 2 were under the influence of drug and alcohol

"""

# Commented out IPython magic to ensure Python compatibility.
# %%bigquery
# SELECT *
# FROM `insurance-470520.crash_datasets.mrt_driver_influence_summary`
# LIMIT 20;
#

"""### Question 3: How do different interactions and violations correspond to collision manners and injury severity?

#### Mart table of unit action, violation, collision manner and injury severity
"""

# Commented out IPython magic to ensure Python compatibility.
# %%bigquery
# CREATE OR REPLACE VIEW `insurance-470520.crash_datasets.crash_unitaction_violation` AS
# SELECT
#   Traveldirection_One,
#   Traveldirection_Two,
#   Unitaction_One,
#   Unitaction_Two,
#   Violation1_Drv1,
#   Violation1_Drv2,
#   Collisionmanner,
#   Injuryseverity,
#   crash_narrative_summary
# FROM `insurance-470520.crash_datasets.crash_data_report_clean`
# LIMIT 100;
#

# Commented out IPython magic to ensure Python compatibility.
# %%bigquery
# SELECT *
# FROM `insurance-470520.crash_datasets.crash_violation`
# LIMIT 20;

"""#### Crash narrative summary"""

# Commented out IPython magic to ensure Python compatibility.
# %%bigquery
# SELECT
#   crash_narrative_summary,
#   Unitaction_One,
#   Unitaction_Two,
#   Violation1_Drv1,
#   Violation1_Drv2
# FROM `insurance-470520.crash_data_report_raw.crash_data_report`
# LIMIT 10;
#

"""#### Crashes, injuries and fatalities caused by unit actions"""

# Commented out IPython magic to ensure Python compatibility.
# %%bigquery
# -- Driver maneuver interaction (Unitaction_One x Unitaction_Two)
# CREATE OR REPLACE VIEW `insurance-470520.crash_datasets.crash_unitaction` AS
# WITH base AS (
#   SELECT
#     COALESCE(NULLIF(TRIM(Unitaction_One), ''),  'Unknown') AS ua1,
#     COALESCE(NULLIF(TRIM(Unitaction_Two), ''),  'Unknown') AS ua2,
#     SAFE_CAST(Totalinjuries   AS INT64) AS injuries,
#     SAFE_CAST(Totalfatalities AS INT64) AS fatalities
#   FROM `insurance-470520.crash_data_report_raw.crash_data_report`
# )
# SELECT
#   ua1 AS unitaction_one,
#   ua2 AS unitaction_two,
#   COUNT(*)                              AS crashes,
#   SUM(injuries)                         AS injuries,
#   SUM(fatalities)                       AS fatalities,
#   ROUND(SAFE_DIVIDE(SUM(injuries),   COUNT(*)) * 100, 2) AS injuries_per_100_crashes,
#   ROUND(SAFE_DIVIDE(SUM(fatalities), COUNT(*)) * 100, 3) AS fatalities_per_100_crashes
# FROM base
# GROUP BY unitaction_one, unitaction_two
# HAVING crashes >= 100
# ORDER BY crashes DESC, injuries DESC;
#

# Commented out IPython magic to ensure Python compatibility.
# %%bigquery
# SELECT * FROM `insurance-470520.crash_datasets.crash_unitaction` LIMIT 10;

"""#### Crashes, injuries and fatalities caused by violations"""

# Commented out IPython magic to ensure Python compatibility.
# %%bigquery
# -- Driver violation interaction (Violation1_Drv1 x Violation1_Drv2)
# CREATE OR REPLACE VIEW `insurance-470520.crash_datasets.crash_violation` AS
# WITH base AS (
#   SELECT
#     COALESCE(NULLIF(TRIM(Violation1_Drv1), ''), 'Unknown') AS v1,
#     COALESCE(NULLIF(TRIM(Violation1_Drv2), ''), 'Unknown') AS v2,
#     SAFE_CAST(Totalinjuries   AS INT64) AS injuries,
#     SAFE_CAST(Totalfatalities AS INT64) AS fatalities
#   FROM `insurance-470520.crash_data_report_raw.crash_data_report`
# )
# SELECT
#   v1 AS violation_drv1,
#   v2 AS violation_drv2,
#   COUNT(*)                              AS crashes,
#   SUM(injuries)                         AS injuries,
#   SUM(fatalities)                       AS fatalities,
#   ROUND(SAFE_DIVIDE(SUM(injuries),   COUNT(*)) * 100, 2) AS injuries_per_100_crashes,
#   ROUND(SAFE_DIVIDE(SUM(fatalities), COUNT(*)) * 100, 3) AS fatalities_per_100_crashes
# FROM base
# GROUP BY violation_drv1, violation_drv2
# HAVING crashes >= 100
# ORDER BY crashes DESC, injuries DESC
# LIMIT 10;
#

# Commented out IPython magic to ensure Python compatibility.
# %%bigquery
# SELECT * FROM `insurance-470520.crash_datasets.crash_violation` LIMIT 10;

"""#### Top collision manners"""

# Commented out IPython magic to ensure Python compatibility.
# %%bigquery
# -- Top collision manners
# CREATE OR REPLACE VIEW `insurance-470520.crash_datasets.crash_collisionmanner` AS
# WITH base AS (
#   SELECT
#     COALESCE(NULLIF(TRIM(Collisionmanner), ''), 'Unknown') AS collisionmanner,
#     SAFE_CAST(Totalinjuries   AS INT64) AS injuries,
#     SAFE_CAST(Totalfatalities AS INT64) AS fatalities
#   FROM `insurance-470520.crash_data_report_raw.crash_data_report`
# )
# SELECT
#   collisionmanner,
#   COUNT(*)                               AS crashes,
#   SUM(injuries)                          AS injuries,
#   SUM(fatalities)                        AS fatalities,
#   ROUND(100 * SAFE_DIVIDE(SUM(injuries),   COUNT(*)), 2) AS injuries_per_100_crashes,
#   ROUND(100 * SAFE_DIVIDE(SUM(fatalities), COUNT(*)), 3) AS fatalities_per_100_crashes
# FROM base
# GROUP BY collisionmanner
# HAVING crashes >= 25               -- avoid tiny/noisy categories; adjust as needed
# ORDER BY fatalities_per_100_crashes DESC, crashes DESC;
#

# Commented out IPython magic to ensure Python compatibility.
# %%bigquery
# SELECT * FROM `insurance-470520.crash_datasets.crash_collisionmanner` LIMIT 10;

"""### Question 4: How do external factors such as time of day, weather, light and surface coditions relate to crash?

"""

# Commented out IPython magic to ensure Python compatibility.
# %%bigquery
# CREATE OR REPLACE VIEW `insurance-470520.crash_datasets.crash_external_factors` AS
# SELECT
#   time_of_day_category,
#   COALESCE(NULLIF(TRIM(Weather),          ''), 'Unknown') AS Weather,
#   COALESCE(NULLIF(TRIM(Lightcondition),   ''), 'Unknown') AS Lightcondition,
#   COALESCE(NULLIF(TRIM(SurfaceCondition), ''), 'Unknown') AS SurfaceCondition,
#   COUNT(*) AS crashes,
#   SUM(SAFE_CAST(Totalinjuries   AS INT64)) AS injuries,
#   SUM(SAFE_CAST(Totalfatalities AS INT64)) AS fatalities,
#   ROUND(100 * SAFE_DIVIDE(SUM(SAFE_CAST(Totalinjuries   AS INT64)), COUNT(*)), 2) AS injuries_per_100_crashes,
#   ROUND(100 * SAFE_DIVIDE(SUM(SAFE_CAST(Totalfatalities AS INT64)), COUNT(*)), 3) AS fatalities_per_100_crashes
# FROM `insurance-470520.crash_data_report_raw.crash_data_report`
# GROUP BY time_of_day_category, Weather, Lightcondition, SurfaceCondition
# ORDER BY crashes DESC, injuries DESC;
#

# Commented out IPython magic to ensure Python compatibility.
# %%bigquery
# SELECT * FROM `insurance-470520.crash_datasets.crash_external_factors` LIMIT 10;

"""#### Same Weather + SurfaceCondition, compare Lightcondition (Daylight vs Dark vs Dusk)"""

# Commented out IPython magic to ensure Python compatibility.
# %%bigquery
# CREATE OR REPLACE VIEW `insurance-470520.crash_datasets.crash_weather` AS
# SELECT
#   Weather,
#   SurfaceCondition,
#   -- totals per pair
#   SUM(crashes) AS total_crashes,
#   -- injuries/fatalities rates per light condition (per 100 crashes)
#   ROUND(100 * SAFE_DIVIDE(SUM(IF(Lightcondition='Daylight',    injuries,   0)),
#                           NULLIF(SUM(IF(Lightcondition='Daylight',    crashes, 0)),0)), 2) AS inj_rate_daylight,
#   ROUND(100 * SAFE_DIVIDE(SUM(IF(Lightcondition='Dark Lighted',injuries,   0)),
#                           NULLIF(SUM(IF(Lightcondition='Dark Lighted',crashes, 0)),0)), 2) AS inj_rate_dark,
#   ROUND(100 * SAFE_DIVIDE(SUM(IF(Lightcondition='Dusk',        injuries,   0)),
#                           NULLIF(SUM(IF(Lightcondition='Dusk',        crashes, 0)),0)), 2) AS inj_rate_dusk,
#   ROUND(100 * SAFE_DIVIDE(SUM(IF(Lightcondition='Daylight',    fatalities, 0)),
#                           NULLIF(SUM(IF(Lightcondition='Daylight',    crashes, 0)),0)), 3) AS fat_rate_daylight,
#   ROUND(100 * SAFE_DIVIDE(SUM(IF(Lightcondition='Dark Lighted',fatalities, 0)),
#                           NULLIF(SUM(IF(Lightcondition='Dark Lighted',crashes, 0)),0)), 3) AS fat_rate_dark,
#   ROUND(100 * SAFE_DIVIDE(SUM(IF(Lightcondition='Dusk',        fatalities, 0)),
#                           NULLIF(SUM(IF(Lightcondition='Dusk',        crashes, 0)),0)), 3) AS fat_rate_dusk
# FROM `insurance-470520.crash_datasets.crash_external_factors`
# GROUP BY Weather, SurfaceCondition
# HAVING total_crashes >= 50
# ORDER BY total_crashes DESC;
#

# Commented out IPython magic to ensure Python compatibility.
# %%bigquery
# SELECT * FROM `insurance-470520.crash_datasets.crash_weather`;

"""#### Same Lightcondition + Weather, compare SurfaceCondition"""

# Commented out IPython magic to ensure Python compatibility.
# %%bigquery
# CREATE OR REPLACE VIEW `insurance-470520.crash_datasets.crash_conditions` AS
# SELECT
#   Lightcondition,
#   Weather,
#   SurfaceCondition,
#   SUM(crashes)    AS crashes,
#   SUM(injuries)   AS injuries,
#   SUM(fatalities) AS fatalities,
#   ROUND(100 * SAFE_DIVIDE(SUM(injuries),   SUM(crashes)), 2) AS injuries_per_100_crashes,
#   ROUND(100 * SAFE_DIVIDE(SUM(fatalities), SUM(crashes)), 3) AS fatalities_per_100_crashes
# FROM `insurance-470520.crash_datasets.crash_external_factors`
# GROUP BY Lightcondition, Weather, SurfaceCondition
# HAVING crashes >= 20
# ORDER BY Lightcondition, Weather, fatalities_per_100_crashes DESC, crashes DESC
# LIMIT 10;
#

# Commented out IPython magic to ensure Python compatibility.
# %%bigquery
# SELECT * FROM `insurance-470520.crash_datasets.crash_conditions`;

"""#### Injury severity by time of the day"""

# Commented out IPython magic to ensure Python compatibility.
# %%bigquery
# CREATE OR REPLACE VIEW `insurance-470520.crash_datasets.crash_severity_by_time` AS
# WITH base AS (
#   SELECT
#     COALESCE(NULLIF(TRIM(time_of_day_category), ''), 'Unknown') AS time_of_day_category,
#     COALESCE(NULLIF(TRIM(Weather),          ''), 'Unknown')     AS Weather,
#     COALESCE(NULLIF(TRIM(SurfaceCondition), ''), 'Unknown')     AS SurfaceCondition,
#     SAFE_CAST(Totalinjuries   AS INT64) AS Totalinjuries,
#     SAFE_CAST(Totalfatalities AS INT64) AS Totalfatalities
#   FROM `insurance-470520.crash_data_report_raw.crash_data_report`
# )
# SELECT
#   time_of_day_category,
#   Weather,
#   SurfaceCondition,
#   COUNT(*)                          AS crashes,
#   SUM(Totalinjuries)                AS injuries,
#   SUM(Totalfatalities)              AS fatalities,
#   ROUND(100 * SAFE_DIVIDE(SUM(Totalinjuries),   COUNT(*)), 2) AS injuries_per_100_crashes,
#   ROUND(100 * SAFE_DIVIDE(SUM(Totalfatalities), COUNT(*)), 3) AS fatalities_per_100_crashes,
#   ROW_NUMBER() OVER (
#     PARTITION BY time_of_day_category
#     ORDER BY ROUND(100 * SAFE_DIVIDE(SUM(Totalfatalities), COUNT(*)), 3) DESC,
#              COUNT(*) DESC
#   ) AS ladder_rank
# FROM base
# GROUP BY time_of_day_category, Weather, SurfaceCondition
# HAVING COUNT(*) >= 20
# QUALIFY ladder_rank <= 10
# ORDER BY time_of_day_category, ladder_rank;
#

# Commented out IPython magic to ensure Python compatibility.
# %%bigquery
# SELECT * FROM `insurance-470520.crash_datasets.crash_severity_by_time`;

"""### Question 5: How does travel direction relate to crash?

#### Mart table of crash location
"""

# Commented out IPython magic to ensure Python compatibility.
# %%bigquery
# CREATE OR REPLACE TABLE `insurance-470520.crash_datasets.crash_location_summary` AS
# SELECT
#   Traveldirection_One,
#   Traveldirection_Two,
#   StreetName,
#   CrossStreet,
#   JunctionRelation,
#   Latitude,
#   Longitude,
#   Distance,
#   SUM(SAFE_CAST(Totalinjuries   AS INT64))   AS total_injuries,
#   SUM(SAFE_CAST(Totalfatalities AS INT64))   AS total_fatalities,
#   COUNT(*)                                    AS crashes,
#   ROUND(100 * SAFE_DIVIDE(SUM(SAFE_CAST(Totalinjuries   AS INT64)), COUNT(*)), 2) AS injuries_per_100_crashes,
#   ROUND(100 * SAFE_DIVIDE(SUM(SAFE_CAST(Totalfatalities AS INT64)), COUNT(*)), 3) AS fatalities_per_100_crashes
# FROM `insurance-470520.crash_data_report_raw.crash_data_report`
# GROUP BY
#   Traveldirection_One,
#   Traveldirection_Two,
#   StreetName,
#   CrossStreet,
#   JunctionRelation,
#   Latitude,
#   Longitude,
#   Distance
# ORDER BY total_injuries DESC, total_fatalities DESC;
#

# Commented out IPython magic to ensure Python compatibility.
# %%bigquery
# SELECT * FROM `insurance-470520.crash_datasets.crash_location_summary` LIMIT 15;
#

"""#### Direction pairs that are most injurious/fatal"""

# Commented out IPython magic to ensure Python compatibility.
# %%bigquery
# CREATE OR REPLACE TABLE `insurance-470520.crash_datasets.crash_conflict_summary` AS
# WITH base AS (
#   SELECT
#     Traveldirection_One,
#     Traveldirection_Two,
#     CASE
#       WHEN Traveldirection_One = Traveldirection_Two THEN 'Same'
#       WHEN (Traveldirection_One IN ('North','South') AND Traveldirection_Two IN ('North','South'))
#         OR (Traveldirection_One IN ('East','West') AND Traveldirection_Two IN ('East','West'))
#         THEN 'Opposite'
#       ELSE 'Crossing'
#     END AS conflict_type,
#     SAFE_CAST(Totalinjuries   AS INT64)  AS injuries,
#     SAFE_CAST(Totalfatalities AS INT64)  AS fatalities
#   FROM `insurance-470520.crash_data_report_raw.crash_data_report`
# )
# SELECT
#   conflict_type,
#   COUNT(*) AS crashes,
#   SUM(injuries)   AS total_injuries,
#   SUM(fatalities) AS total_fatalities,
#   ROUND(SAFE_DIVIDE(SUM(injuries),   COUNT(*)) * 100, 2) AS injuries_per_100,
#   ROUND(SAFE_DIVIDE(SUM(fatalities), COUNT(*)) * 100, 3) AS fatalities_per_100
# FROM base
# GROUP BY conflict_type
# ORDER BY crashes DESC;
#

# Commented out IPython magic to ensure Python compatibility.
# %%bigquery
# SELECT *
# FROM `insurance-470520.crash_datasets.crash_conflict_summary`;
#

"""#### Wrong-way or opposite-direction events clustered by corridor or time of day"""

# Commented out IPython magic to ensure Python compatibility.
# %%bigquery
# WITH base AS (
#   SELECT
#     StreetName,
#     CrossStreet,
#     time_of_day_category,
#     CASE
#       WHEN (Traveldirection_One IN ('North','South') AND Traveldirection_Two IN ('North','South'))
#         OR (Traveldirection_One IN ('East','West') AND Traveldirection_Two IN ('East','West'))
#         THEN 'Opposite'
#       ELSE 'Other'
#     END AS conflict_type,
#     SAFE_CAST(Totalinjuries AS INT64)   AS injuries,
#     SAFE_CAST(Totalfatalities AS INT64) AS fatalities
#   FROM `insurance-470520.crash_data_report_raw.crash_data_report`
# )
# SELECT
#   StreetName,
#   CrossStreet,
#   time_of_day_category,
#   COUNT(*) AS crashes,
#   SUM(injuries) AS injuries,
#   SUM(fatalities) AS fatalities
# FROM base
# WHERE conflict_type = 'Opposite'
# GROUP BY StreetName, CrossStreet, time_of_day_category
# HAVING COUNT(*) >= 3
# ORDER BY crashes DESC
# LIMIT 20;
#